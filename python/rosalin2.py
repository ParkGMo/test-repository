# Problem
# In DNA strings, symbols 'A' and 'T' are complements of each other, as are 'C' and 'G'.

# The reverse complement of a DNA string s
#  is the string sc
#  formed by reversing the symbols of s
# , then taking the complement of each symbol (e.g., the reverse complement of "GTCA" is "TGAC").

# Sample Dataset
# AAAACCCGGT

# Sample Output
# ACCGGGTTTT

a="AAAACCCGGT"

def reverse_sequence(a):

    return ''.join([{'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}[i] for i in a[::-1]])

print(reverse_sequence(a))

Quiz="AGCCAGGCACGACCTCGGGGCTATCCATCTAACACTCATGGTATACCTTGTTGGTTACACAATCCGGCACTAGACCGCAGGCATTAAGCGATCGTGCTATGATTACCTCTGACGGATAGAACCGCTATCGGCGTAAGACTTAGACCTGAAGGACCTTAATGAGAGCCGAAGAGTCTATCTGCTGGGTTTTCCCGCTGAGGCTCTTGGGCCATCCCAGAACGGGCCTACAAAGAGGAGGCGTGGGGGCAGGACATTCGTATGGGTACTTACTTGAGAGCGTGGAGAATCTAGCATGATTTTTCCACAGGCTTTAAATACATTAATGAGCTCGGCGGGCGTAAGTCTAGGTAAATGAACTATAGTCTCCTGCGTTACGATACCACTACACCGGCGCTTATAATAATCAAATATGAGCTGCCTGGACCATTCTAAAGGGCTTCTCGGAAAGCGGTTAGATCGAGGAGTCTTTGGAGTTGGATGAAGTTTAATATGACAAGTTCATAAGGACAATGCTCCGGGCCTTATCACGGACAGGCTTTGGTTGCCGGGTTTACTCTCACTTCAATGCTTCTTTGGGCTTACAGGTCAGGCCCCAAATTGTTGATGCATTACGCACGGTCGGAGCGTTGATGCGCCCGTTTAAACCGCTCGGAGTGCGAATAAGCCGCAGACTACGTATCACAGGCGCTCCCGGTAAAGTGGGGCCACGCAATAAGTTGCCGATTAAGCATGGTAGCTAGCTCCTTTAGTAGGGACTGTCATTTAGACAGATAGACAGTGACCAAGTTGTGTAGTGGTAGAATCCC"

print(reverse_sequence(Quiz))

# The Genetic Code
# Problem
# The 20 commonly occurring amino acids are abbreviated by using 20 letters from the English alphabet (all letters except for B, J, O, U, X, and Z). Protein strings are constructed from these 20 symbols. Henceforth, the term genetic string will incorporate protein strings along with DNA strings and RNA strings.

# The RNA codon table dictates the details regarding the encoding of specific codons into the amino acid alphabet.

# Sample Dataset
# AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA

# RNA codon table
# UUU F      CUU L      AUU I      GUU V
# UUC F      CUC L      AUC I      GUC V
# UUA L      CUA L      AUA I      GUA V
# UUG L      CUG L      AUG M      GUG V
# UCU S      CCU P      ACU T      GCU A
# UCC S      CCC P      ACC T      GCC A
# UCA S      CCA P      ACA T      GCA A
# UCG S      CCG P      ACG T      GCG A
# UAU Y      CAU H      AAU N      GAU D
# UAC Y      CAC H      AAC N      GAC D
# UAA Stop   CAA Q      AAA K      GAA E
# UAG Stop   CAG Q      AAG K      GAG E
# UGU C      CGU R      AGU S      GGU G
# UGC C      CGC R      AGC S      GGC G
# UGA Stop   CGA R      AGA R      GGA G
# UGG W      CGG R      AGG R      GGG G 

# Sample Output
# MAMAPRTEINSTRING

# RNAList=list(RNA)
RNA="AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA"

codonTable = {"UUU": "F", "UUC": "F", "UUA": "L", "UUG": "L",
        "UCU": "S", "UCC": "S", "UCA": "S", "UCG": "S",
        "UAU": "Y", "UAC": "Y", "UAA": "Stop", "UAG": "Stop",
        "UGU": "C", "UGC": "C", "UGA": "Stop", "UGG": "W",
        "CCU": "P", "CCC": "P", "CCA": "P", "CCG": "P",
        "CAU": "H", "CAC": "H", "CAA": "Q", "CAG": "Q",
        "CGU": "R", "CGC": "R", "CGA": "R", "CGG": "R",
        "AUU": "I", "AUC": "I", "AUA": "I", "AUG": "M",
        "ACU": "T", "ACC": "T", "ACA": "T", "ACG": "T",
        "AAU": "N", "AAC": "N", "AAA": "K", "AAG": "K",
        "AGU": "S", "AGC": "S", "AGA": "R", "AGG": "R",
        "GUU": "V", "GUC": "V", "GUA": "V", "GUG": "V",
        "GCU": "A", "GCC": "A", "GCA": "A", "GCG": "A",
        "GAU": "D", "GAC": "D", "GAA": "E", "GAG": "E",
        "GGU": "G", "GGC": "G", "GGA": "G", "GGG": "G"}



def RnaToProtein(rnaSequence):
    protein = []
    for i in range(0, len(rnaSequence), 3):
        codon = rnaSequence[i:i+3]
        if codon in codonTable:
            aminoCode = codonTable[codon]
            if aminoCode == "Stop":
                break
            protein.append(aminoCode)
    return ''.join(protein)

proteinSequence = RnaToProtein(RNA)
print(proteinSequence)


# Evolution as a Sequence of Mistakes
# Sample Dataset
aSeq="GAGCCTACTAACGGGAT"
bSeq="CATCGTAATGACGGCCT"


# Sample Output
# 7

def hammingDistance(a, b):
    return sum(a[i] != b[i] for i in range(len(a)))

print(hammingDistance(aSeq, bSeq))

Q1Seq="CCTGAAAGTAAGGCAATCCACTTATGACCTAACGAAATTTTTATCGTACAATATGCATCTATTGGATCGTATCTTCAACAAACGCGCCGCCCTGATATCTGTAGCGTCGATGACTAGACCGCCTCTAACGCACTATGACCCTATGCGATACAGAGACCTATATAGAACGCGCTTACTCCGCTATGTGCTTAGAGATATCAATGGACCAACAGCGCCTTTAAGCTTCGAACGCAGAGTCTATAATCGTTGTCTACGGCCCACGCGTGATAGCCCATGGTGGTCAACCGGACACCGAATCGTGTCCGGATTAGGCTTTGGTTGCGGCCATTTTCTCAGCGCTCGTATTACTATTTCGCTGTGGATTTGAGTTGTTGAGCACGATACCTATTACCTGAGCCACAACACTGGCCCATCCCGCGTGGACGACTTGGGCGCGCAACTGAATGTTTAGAACTACAAATGTCGAGGGAATCCTCGGGCGCAGCTCCATAGTCGCCTTCTATTTGCTTGGTACGATTCCCTAACTACTCGAATGCAAGGTCAATAGATCCAGCCGCGCCGGCCAAACGTGACGGTACGTGACTTGACATGTTGACTATAATCCTTCCCGACTGCACCCGACGAATCATTGAGAGCTACCCTACCTTCCCCGAATGCAATGTACTGCTGACCACGACGCAGGTCCGTCACCGATAAATCGATCTAAGTTATCCCGAGTTGAGGGTGCGACTACTGGGCACCTGTTGTAAGGTTGTGGGGCACGGTATCATGTCTTGCCACAACTGAAGACGAGAACATTGGGAATAATTACACATTGCGGGGTCTCACAAGTTGGCTGTATCCTCCTTAACCTCTGCGAGTCAGTTTTTAAACGCTGCCTGGGAACTTACGGTCAACCCTGCTCGACGTAGCGTCAAAATGCGGTCGTCAAGTGAGACACAAGCGAATGTGG"
Q2Seq="GTAGTTATTCCGGATCTCTATTAATGACGGAACTCTATTTTGCGACTACCATACGGACCTAGACGACAGTATGTTCACCTTACGCACGGCCGTTCTATACAGAGTCACAATGTTGAGACCACCTCTCGCTAGGTCGGACCCTATGCATCACAGCGACCATTATGGAGTCCGATAGCTTCCCAGAAGGCTGAGAGTTTCCAGTATATCGTATCTTCCTATACGTTTTGAACCTATCGTTTCGTTTATGGATCAACGACCTCGTCGGGAGTGTCGACGGCGTTATGCATCACACACAAAGGTGTCCGGGTAAAACGCTCATACCCTTCATATTGAACGGGCCAGTATGACTTTTGGGGTGTGGTTTGACCATGTCGAGCACAATGCCGGTGAACGGAGACGACACGCCACCGCTTTAAGCTCGGCCGAATTCTAATCGTGATTGATTGGTTTGATTGTCATAGCCTGGGCTATCCCGCGTACTCTCCTCCGTAAGGACCTGGCATTTCCTCGACATGCTTCACTAACGGCTCCATCTCGGGTCACATAGATCCAGCTGTGCCAGCCATACGTGACCCTATCTGACAGGACTTGCAAACCTAATTCGTTCTCTTCAGCATGTACAATCACATTCAATTCGAACGTACTGTAATGTTTAAGAAAGACAACTGGTCCGCGGTTCTAGGAGCTCAACGAGCATTTAATAACAGCGAAGCCCGGTGGCACATTCGTCGCAAGCAAACATGTTGTTAGTGGATACGGCAAATTTTTACGATATTGGACAGCGGGGCACTAGCAGAATGGTAAGCTACGCACCATGCTTGGTAACGTGCCTCGGCTAGGGCCTTCTAAAACTGTGCGTATAAGTATATGAGACCTTCCTCGACTGGGGGGGATATCCCGGCTCGACACACCCTACGAATGTGGGCCGCTAGTACGAATGAACCGAGTAACC"
print(hammingDistance(Q1Seq,Q2Seq))
