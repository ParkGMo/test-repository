# 1. https://rosalind.info/problems/dna/
# A string is simply an ordered collection of symbols selected from some alphabet and formed into a word; 
# the length of a string is the number of symbols that it contains.
# An example of a length 21 DNA string (whose alphabet contains the symbols 'A', 'C', 'G', and 'T') 
# is "ATGCTTCAGAAAGGTCTTACG."
# seq='AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'
seq='ACTAGGTCGTCCACACGTTGATCTCGAGGATACACTACATACGGGACCCTTCCTAAGACGGCACGCCTGTTGCTCAACGCGTTGTCTGCCACACTGACCGGATTTCTCCGTTGCACGAACTACTGGGCCCGATCGGTGACACAGTGGCGCGTAACTGTTTGGGTTTCAACAAAATGCCGTTATCCAATGCGGTCGTATGTGTTATACAGGATTATGTCCAGATAGAGGTGGGCCATGTAAAAAACATCTAGACCAACTCACCAATTGTGAAAAATGACCCTACTACAATCTCAATGTTGCCGAAGAAGCGCAAGTAAACCTGCGCACGAGGTTCGGTACGACATTACGGTGGCGTACGTACCTTCAACAGCTAGCATTCGAGCCCGTTAGTACCACGTTTTTATCCTTACGTGAGTCCGACCATGGTCGTTAGCGATAAAATCGCGATCTTGCTACAGTATCCTTCAGTTATCTCTTTGCAACCATCCACACTTCCAGTCCTGAGCGCGGTCCTCGAGATCCAGGGAGAGCGATGAGTGTAGTTTTGCAGCTCCGATATAAAAACGCCATGAACTTTAATGTAGTATTATATAGGGTTCCTGCGAACAAGCTCATGCCTTTTCCAACCTAGTTCGGCATATTAACAAGACTTAATTGCGGCCGACTCGCTAAAGTGGCGACCTGAAGGTTCGCGCCTCTAACGTTGATCATCCTGCTCTCGACAACAATACGCGTTGAAACTCTATCTCCACAGATGCCTTAAAGGCTTACGTTGTGAACCATATCAGAAGAGGGCATCTATTATCCAATGTAAGCGTCATATGATGCCAGTCGACAACTGTGTATCTGGCAAAATGCAGGGTTCACAGGAATCTAATCGTTGACGGAGGAGACGGGAGACAGCAGCTTATATTGACGAGGACGCTCAG'
Base=["A","C","G","T"]
result=''
for i in Base:
        if i in seq:
            result+=f"{seq.count(i)} "
print(result)

# 2. https://rosalind.info/problems/rna/
# An RNA string is a string formed from the alphabet containing 'A', 'C', 'G', and 'U'.
# Given a DNA string t corresponding to a coding strand, its transcribed RNA string u is formed by 
# replacing all occurrences of 'T' in t  with 'U' in u
# seq="GATGGAACTTGACTACGTAAATT" 
seq="TGTTAAACAGAGCTACAAACTGAAACGGAAGCGGAGAAGTCACCCACCAAACTGATGCGGCGAGGTTCCAAATCGACAAAGTTAGCGTCCTACAGGACATAAGTGGTTATAAACAGAAACCCTACGCTAAGTCCTCACGCACAAACTATACCGTGATGCGTCGACGCACGGATCGAGTAGATAGACCTTCTAAGGGTATGAATATTCATAAATCTTGCATGGTAACTTAGAGCAGCGGGTACTAAAAATGTCTAATCGCTCCTGTCGACTGTTCCAACACTCCTGGGGTCCTGGATTCCTCTTTAGGCAGATAGGCTTGCAGCGGTGGGGGTGATAGTACCACATGCTGTCATCCGCAATACAGGAAGTTGGCATCATGTGTGGTCCACCGGGCCTTCAAACGTATAAGAATTACTGCGTCCTTGCCGGATATGGCGGGTCACCAAAAACGAACGCACACGTGGCCGAGGCTTATCCAGGATACGTGTTTCTGCGCAATGGTGTCGTCTCCATCGTCACAGTCAATAGAACAGGCGCGACGCGGGGGGGCGAACACTATACCCTGGATAAAAGACGGTTTGTCGGCTGCGCCTCAAAACTCCTACCAGTTTGAGGTGAGTGTCTAAACCAGTTGAGGAGTTTTAGGGTTTCGTACTGACATGCGCCATTATATCCGTGTTACTTGTCGAGGGTGGTAACACAAAGTGAAGTGCGTGCTGCAGGACAGCTGTGACTTTATTACAACCCACTGATATCTATGGCGCTCTCTCATTGTGACGGGTTTTCTACGTACCAGTCCGTGTACCTAGAGCCATAGACGTTCAGGTAATAGTTTTCGTGGAACGGTCACAAACAAATGCGGTGATATGTAGGGTTATTAGAAGGCTAGGGAAGTGTTTGGCCGTCG" 
RNA_seq=seq.replace("T","U")
print(RNA_seq)

# 3. https://rosalind.info/problems/gc/
# The GC-content of a DNA string is given by the percentage of symbols in the string that are 'C' or 'G'. For example, 
# the GC-content of "AGCTATAG" is 37.5%. Note that the reverse complement of any DNA string has the same GC-content.
Rosalind_6404="CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG"
Rosalind_5959="CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC"
Rosalind_0808="CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGGTGGAAT"
def GCratio (a):
      return (a.count('C') + a.count('G')) / len(a) * 100
for name, value in globals().items():
      if name.startswith('Rosalind_'):
        print(f"{name}: {GCratio(value)}%")
      